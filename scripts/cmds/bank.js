const fs = require("fs-extra");
const path = require("path");

module.exports = {
  config: {
    name: "bank",
    version: "1.0.1",
    author: "ntkiendz",
    countDown: 0,
    role: 0,
    shortDescription: "Ng√¢n h√†ng Goat Bank",
    longDescription: "H·ªá th·ªëng g·ª≠i/r√∫t ti·ªÅn, c·ªông l√£i t·ª± ƒë·ªông",
    category: "bank",
    guide: {
      body: `
üè¶ GOAT BANK MENU üè¶
-bank register -> ƒêƒÉng k√Ω t√†i kho·∫£n
-bank check -> Xem s·ªë d∆∞ + l√£i su·∫•t
-bank g·ª≠i <s·ªë ti·ªÅn> -> G·ª≠i ti·ªÅn
-bank r√∫t <s·ªë ti·ªÅn> -> R√∫t ti·ªÅn
-bank history -> L·ªãch s·ª≠ giao d·ªãch

üíµ G·ª≠i >= 100$, R√∫t >= 10,000$
üí∏ Ph√≠ giao d·ªãch: 1.5%
üíπ L√£i su·∫•t: 0,025% m·ªói 5 ti·∫øng
‚õî Ch·ªß Nh·∫≠t: Ng√¢n h√†ng ngh·ªâ.
`
    }
  },

  // ====== Bi·∫øn to√†n c·ª•c ======
  onLoad: async function () {
    const dir = path.join(__dirname, "data");
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });

    const pathData = path.join(dir, "bank.json");
    if (!fs.existsSync(pathData)) fs.writeFileSync(pathData, "[]", "utf-8");

    global.bankLastInterest = Date.now();
    const interestRate = 0.00025;
    const fiveHours = 5 * 60 * 60 * 1000;

    setInterval(() => {
      try {
        const today = new Date().getDay();
        if (today === 0) {
          console.log("[BANK] Ch·ªß Nh·∫≠t - ng√¢n h√†ng ngh·ªâ, kh√¥ng c·ªông l√£i.");
          return;
        }

        let users = JSON.parse(fs.readFileSync(pathData, "utf-8"));
        let updated = false;

        users.forEach(user => {
          let balance = BigInt(user.money || "0");
          if (balance > 0n) {
            let interest = BigInt(Math.floor(Number(balance) * interestRate));
            if (interest > 0n) {
              user.money = String(balance + interest);
              if (!user.history) user.history = [];
              const time = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });
              user.history.unshift({ type: "C·ªông l√£i su·∫•t 0,025%", amount: `+${formatFullAmount(interest)}`, time });
              if (user.history.length > 20) user.history.pop();
              updated = true;
            }
          }
        });

        if (updated) {
          fs.writeFileSync(pathData, JSON.stringify(users, null, 2), "utf-8");
          global.bankLastInterest = Date.now();
          console.log(`[BANK] ƒê√£ c·ªông l√£i v√†o ${new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" })}`);
        }
      } catch (err) { console.error("[BANK] L·ªói khi c·ªông l√£i:", err); }
    }, fiveHours);
  },

  onStart: async function ({ args, message, event, usersData }) {
    const senderID = event.senderID;
    const pathData = path.join(__dirname, "data", "bank.json");
    let users = JSON.parse(fs.readFileSync(pathData, "utf-8"));
    let findUser = users.find(u => u.senderID === senderID);

    const saveData = () => fs.writeFileSync(pathData, JSON.stringify(users, null, 2), "utf-8");

    const logTransaction = (type, amount) => {
      const time = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });
      if (!findUser.history) findUser.history = [];
      findUser.history.unshift({ type, amount: formatFullAmount(amount), time });
      if (findUser.history.length > 20) findUser.history.pop();
      saveData();
    };

    try {
      const command = args[0];

      // Ch·ªß Nh·∫≠t: ch·ªâ cho check & history
      if (new Date().getDay() === 0 && command !== "check" && command !== "history") {
        return message.reply("üö´ Ng√¢n h√†ng ngh·ªâ Ch·ªß Nh·∫≠t, vui l√≤ng quay l·∫°i sau.");
      }

      // ƒêƒÉng k√Ω
      if (command === "register" || command === "t·∫°o") {
        if (!findUser) {
          users.push({ senderID, money: "0", history: [] });
          saveData();
          return message.reply(`[‚úÖ] ƒêƒÉng k√Ω th√†nh c√¥ng`);
        } else return message.reply(`[‚ö†Ô∏è] B·∫°n ƒë√£ c√≥ t√†i kho·∫£n r·ªìi!`);
      }

      // Check s·ªë d∆∞
      // Check s·ªë d∆∞
if (command === "check") {
  if (new Date().getDay() === 0) {
    return message.reply("üö´ H√¥m nay l√† Ch·ªß Nh·∫≠t, ng√¢n h√†ng ngh·ªâ. Vui l√≤ng quay l·∫°i sau.");
  }

  let targetID = senderID;
  if (Object.keys(event.mentions).length > 0) targetID = Object.keys(event.mentions)[0];
  else if (event.messageReply) targetID = event.messageReply.senderID;

  const targetUser = users.find(u => u.senderID === targetID);
  if (!targetUser) {
    const targetName = (await usersData.getName(targetID));
    return message.reply(`[‚ö†Ô∏è] ${targetName} ch∆∞a c√≥ t√†i kho·∫£n.`);
  }

  const balance = BigInt(targetUser.money);
  const displayBalance = formatFullAmount(balance);
  const targetName = (await usersData.getName(targetID));

  return message.reply(
    `[‚úÖ SUCCESS] ¬ª T√†i kho·∫£n ${targetName} trong GoatBank:\n` +
    `üí∞ S·ªë d∆∞: ${displayBalance}\n` +
    `‚ôªÔ∏è L√£i su·∫•t: 0,025% m·ªói 5 ti·∫øng\n` +
    `‚è≥ L·∫ßn c·ªông l√£i ti·∫øp theo: ${getTimeRemaining()}\n` +
    `üìå Tr·∫°ng th√°i t√†i kho·∫£n: T·ªët`
  );
}

      // G·ª≠i ti·ªÅn
      if (command === "g·ª≠i" || command === "send") {
        if (!findUser) return message.reply(`[‚ö†Ô∏è] B·∫°n ch∆∞a c√≥ t√†i kho·∫£n`);
        if (!args[1]) return message.reply("[‚ö†Ô∏è] Nh·∫≠p s·ªë ti·ªÅn");
        let balances = (await usersData.get(senderID)).money;
        let rawAmount = args[1] !== "all" ? parseAmount(args[1]) : BigInt(balances);
        if (rawAmount === null) return message.reply("[‚ö†Ô∏è] S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
        if (rawAmount < 100n) return message.reply("[‚ö†Ô∏è] T·ªëi thi·ªÉu g·ª≠i 100$");
       if (rawAmount > BigInt(balances)) {
  let missing = rawAmount - BigInt(balances);
  return message.reply(`[‚ùå FAILED] ¬ª B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ g·ª≠i ng√¢n h√†ng, c√≤n thi·∫øu ${formatFullAmount(missing)} n·ªØa`);
}
        let fee = rawAmount * 15n / 1000n;
        let amountAfterFee = rawAmount - fee;
        findUser.money = String(BigInt(findUser.money) + amountAfterFee);
        await usersData.set(senderID, { money: balances - Number(rawAmount) });
        logTransaction("G·ª≠i ti·ªÅn (tr·ª´ ph√≠ 1.5%)", amountAfterFee);
        return message.reply(`[‚úÖ] G·ª≠i th√†nh c√¥ng ${formatFullAmount(amountAfterFee)} (ph√≠ ${formatFullAmount(fee)})`);
      }

      // R√∫t ti·ªÅn
      if (command === "r√∫t" || command === "l·∫•y") {
        if (!findUser) return message.reply(`[‚ö†Ô∏è] B·∫°n ch∆∞a c√≥ t√†i kho·∫£n`);
        if (!args[1]) return message.reply("[‚ö†Ô∏è] Nh·∫≠p s·ªë ti·ªÅn");
        let rawAmount = args[1] !== "all" ? parseAmount(args[1]) : BigInt(findUser.money);
        if (rawAmount === null) return message.reply("[‚ö†Ô∏è] S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!");
        if (rawAmount < 10000n) return message.reply("[‚ö†Ô∏è] T·ªëi thi·ªÉu r√∫t 10,000$");
        if (rawAmount > BigInt(findUser.money)) return message.reply(`[‚ö†Ô∏è] S·ªë d∆∞ kh√¥ng ƒë·ªß`);
        let fee = rawAmount * 15n / 1000n;
        let amountAfterFee = rawAmount - fee;
        findUser.money = String(BigInt(findUser.money) - rawAmount);
        let balances = (await usersData.get(senderID)).money;
        await usersData.set(senderID, { money: balances + Number(amountAfterFee) });
        logTransaction("R√∫t ti·ªÅn (tr·ª´ ph√≠ 1.5%)", amountAfterFee);
        return message.reply(`[‚úÖ] R√∫t th√†nh c√¥ng ${formatFullAmount(amountAfterFee)} (ph√≠ ${formatFullAmount(fee)})`);
      }

      // L·ªãch s·ª≠
      if (command === "history" || command === "l·ªãch") {
        if (!findUser) return message.reply(`[‚ö†Ô∏è] B·∫°n ch∆∞a c√≥ t√†i kho·∫£n`);
        const history = findUser.history || [];
        if (history.length === 0) return message.reply("üìú Ch∆∞a c√≥ giao d·ªãch n√†o.");
        let msg = `üìú [L·ªäCH S·ª¨ GIAO D·ªäCH - 5 l·∫ßn g·∫ßn nh·∫•t]\n\n`;
        history.slice(0, 5).forEach((item, index) => {
          msg += `${index + 1}. [${item.type}] - ${item.amount} v√†o ${item.time}\n`;
        });
        return message.reply(msg);
      }

      // Menu m·∫∑c ƒë·ªãnh
      return message.reply(this.config.guide.body);

    } catch (e) {
      console.error(e);
      return message.reply("‚ùå C√≥ l·ªói x·∫£y ra.");
    }
  }
};

// ==== H√†m ti·ªán √≠ch ====

function formatFullAmount(amount) {
  const units = [
    { unit: "g", value: 36n },
    { unit: "gb", value: 27n },
    { unit: "mb", value: 24n },
    { unit: "kb", value: 21n },
    { unit: "b", value: 18n },
    { unit: "m", value: 15n },
    { unit: "k", value: 12n }
  ];

  for (let u of units) {
    let unitValue = 10n ** u.value;
    if (amount >= unitValue) {
      return `${amount.toLocaleString("en-US")}$ (${u.unit})`;
    }
  }
  return `${amount.toLocaleString("en-US")}$`;
}

function parseAmount(str) {
  str = str.toLowerCase();
  const units = { 'k': 12n, 'm': 15n, 'b': 18n, 'kb': 21n, 'mb': 24n, 'gb': 27n, 'g': 36n };
  for (let u in units) {
    if (str.endsWith(u)) {
      let num = str.replace(u, "");
      if (isNaN(num)) return null;
      return BigInt(num) * (10n ** units[u]);
    }
  }
  if (!isNaN(str)) return BigInt(str);
  return null;
}

function getTimeRemaining() {
  const fiveHours = 5 * 60 * 60 * 1000;
  let elapsed = Date.now() - global.bankLastInterest;
  let remaining = fiveHours - elapsed;
  if (remaining < 0) remaining = 0;
  let hours = Math.floor(remaining / (60 * 60 * 1000));
  let minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
  let seconds = Math.floor((remaining % (60 * 1000)) / 1000);
  return `${hours}h ${minutes}m ${seconds}s`;
}