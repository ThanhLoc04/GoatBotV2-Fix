const fs = require("fs");
const path = require("path");

// Th∆∞ m·ª•c l∆∞u shortcut theo box
const shortcutDir = path.join(__dirname, "..", "data", "shortcuts");
if (!fs.existsSync(shortcutDir)) {
  fs.mkdirSync(shortcutDir, { recursive: true });
}

// Load shortcut theo threadID
function loadShortcuts(threadID) {
  const file = path.join(shortcutDir, `${threadID}.json`);
  if (!fs.existsSync(file)) return {};
  return JSON.parse(fs.readFileSync(file, "utf8"));
}

// Save shortcut theo threadID
function saveShortcuts(threadID, data) {
  const file = path.join(shortcutDir, `${threadID}.json`);
  fs.writeFileSync(file, JSON.stringify(data, null, 2), "utf8");
}

module.exports = {
  config: {
    name: "shortcut",
    aliases: ["sc"],
    version: "1.8",
    author: "convert",
    role: 0,
    shortDescription: {
      vi: "Th√™m, x√≥a, list shortcut (theo box, c√≥ file)",
      en: "Add, delete, list shortcuts (per group, with media)"
    },
    category: "group",
    guide: {
      en: "shortcut {sau khi hi·ªán Reply tin nh·∫Øn nh·∫≠p t·ª´ kho√° th√¨ ·∫•n t·ª´ kho√°. v√≠ d·ª• Hi,...}\n-shortcut all {ƒë·ªÉ xem list shortcut ƒë√£ c√†i tr∆∞·ªõc ƒë√≥}\n-shortcut del 1 {ƒë·ªÉ xo√° shortcut th·ª© 1, h√£y xem trong list tr∆∞·ªõc khi xo√°}"
    }
  },

  // ===== B·∫ÆT ƒê·∫¶U HO·∫∂C X·ª¨ L√ù DEL, LIST =====
  onStart: async function ({ args, message, event }) {
    let shortcuts = loadShortcuts(event.threadID);

   // Trong onStart...

if (args[0] === "del") {
  let inputs = args.slice(1);
  if (inputs.length === 0) {
    return message.reply("‚ö†Ô∏è Vui l√≤ng nh·∫≠p key ho·∫∑c s·ªë th·ª© t·ª± ƒë·ªÉ xo√° (c√≥ th·ªÉ nh·∫≠p nhi·ªÅu, c√°ch nhau b·∫±ng d·∫•u c√°ch).");
  }

  let shortcuts = loadShortcuts(event.threadID);
  let keys = Object.keys(shortcuts);
  if (keys.length === 0) {
    return message.reply("üì≠ Nh√≥m n√†y ch∆∞a c√≥ shortcut n√†o.");
  }

  let deleted = [];
  let notFound = [];

  // T·∫°o m·∫£ng ch·ª©a nh·ªØng index ƒë·ªÉ x√≥a theo numeric, ƒë·ªÉ x·ª≠ l√Ω t·ª´ cao xu·ªëng th·∫•p
  let numeric = [];
  let textual = [];

  inputs.forEach(input => {
    if (!isNaN(input)) {
      numeric.push(parseInt(input, 10) - 1); // chuy·ªÉn sang 0-based
    } else {
      textual.push(input.toLowerCase());
    }
  });

  // X√≥a theo index: ƒë·∫£o chi·ªÅu ƒë·ªÉ kh√¥ng l·ªách v·ªã tr√≠
  numeric.sort((a, b) => b - a).forEach(idx => {
    if (idx >= 0 && idx < keys.length) {
      let key = keys[idx];
      delete shortcuts[key];
      deleted.push(`#${idx + 1} (${key})`);
    } else {
      notFound.push(`#${idx + 1}`);
    }
  });

  // X√≥a theo key
  textual.forEach(key => {
    if (shortcuts[key]) {
      delete shortcuts[key];
      deleted.push(key);
    } else {
      notFound.push(key);
    }
  });

  if (deleted.length > 0) {
    saveShortcuts(event.threadID, shortcuts);
  }

  let replyMsg = "";
  if (deleted.length > 0) {
    replyMsg += `üóëÔ∏è ƒê√£ xo√°: ${deleted.join(", ")}.\n`;
  }
  if (notFound.length > 0) {
    replyMsg += `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: ${notFound.join(", ")}.`;
  }
  return message.reply(replyMsg.trim());
}

    // L·ªÜNH LIST
   if (args[0] === "list" || args[0] === "all") {
  let keys = Object.keys(shortcuts);
  if (keys.length === 0) {
    return message.reply("üì≠ Nh√≥m n√†y ch∆∞a c√≥ shortcut n√†o.");
  }
  let msg = "üìå Danh s√°ch shortcut trong nh√≥m:\n\n";
  keys.forEach((k, i) => {
    let sc = shortcuts[k];
    msg += `[${i + 1}] üîë ${k}\n` +
           `üí¨ ${sc.content}\n` +
           `üë§ ${sc.authorName}\n` +
           `‚è∞ ${sc.time}\n` +
           `üìé File: ${sc.attachment.length}\n\n`;
  });
  return message.reply(msg.trim());
}
    // N·∫øu kh√¥ng c√≥ args th√¨ b·∫Øt ƒë·∫ßu t·∫°o shortcut
    return message.reply("„ÄåShortcut„Äç H√£y reply tin nh·∫Øn n√†y ƒë·ªÉ nh·∫≠p t·ª´ kh√≥a:", (err, info) => {
      if (err) return;
      global.GoatBot.onReply.set(info.messageID, {
        commandName: this.config.name,
        author: event.senderID,
        type: "step1",
        data: {},
        threadID: event.threadID
      });
    });
  },

  // ===== NH·∫¨N REPLY =====
  onReply: async function ({ event, message, Reply, usersData }) {
    if (event.senderID !== Reply.author) return;

    let shortcuts = loadShortcuts(Reply.threadID);

    switch (Reply.type) {
      case "step1": {
        Reply.data.key = event.body.trim().toLowerCase();
        return message.reply("„ÄåShortcut„Äç H√£y reply tin nh·∫Øn n√†y ƒë·ªÉ nh·∫≠p n·ªôi dung:", (err, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            commandName: this.config.name,
            author: event.senderID,
            type: "step2",
            data: Reply.data,
            threadID: Reply.threadID
          });
        });
      }

      case "step2": {
        Reply.data.content = event.body;
        return message.reply("„ÄåShortcut„Äç Reply tin nh·∫Øn n√†y ƒë·ªÉ g·ª≠i file (·∫£nh/video/audio) ho·∫∑c nh·∫≠p 's' n·∫øu kh√¥ng c√≥:", (err, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            commandName: this.config.name,
            author: event.senderID,
            type: "step3",
            data: Reply.data,
            threadID: Reply.threadID
          });
        });
      }

      case "step3": {
        let data = Reply.data;

        // N·∫øu kh√¥ng c√≥ file
        if (event.body && event.body.toLowerCase() === "s" && (!event.attachments || event.attachments.length === 0)) {
          data.attachment = [];
        } else {
          // Th∆∞ m·ª•c l∆∞u file theo box
          const dir = path.join(__dirname, "..", "events", "shortcut", Reply.threadID);
          if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });

          data.attachment = [];

          for (let i = 0; i < (event.attachments || []).length; i++) {
            const att = event.attachments[i];
            let ext = "";

            if (att.type === "photo") ext = ".jpg";
            else if (att.type === "video") ext = ".mp4";
            else if (att.type === "audio") ext = ".mp3";

            const filePath = path.join(dir, `${Date.now()}_${i}${ext}`);
            const stream = await global.utils.getStreamFromURL(att.url);
            await new Promise((resolve, reject) => {
              const ws = fs.createWriteStream(filePath);
              stream.pipe(ws);
              ws.on("finish", resolve);
              ws.on("error", reject);
            });

            data.attachment.push(filePath);
          }
        }

        let name = (await usersData.getName(event.senderID)) || "Unknown";
        let time = new Date().toLocaleString("vi-VN");

        shortcuts[data.key] = {
          content: data.content,
          attachment: data.attachment,
          author: event.senderID,
          authorName: name,
          time
        };

        saveShortcuts(Reply.threadID, shortcuts);
        return message.reply(
          `‚úÖ ƒê√£ th√™m shortcut:\n\nüîë Key: ${data.key}\nüí¨ N·ªôi dung: ${data.content}\nüë§ Ng∆∞·ªùi t·∫°o: ${name}\n‚è∞ Th·ªùi gian: ${time}\nüìé File: ${data.attachment.length}`
        );
      }
    }
  },

  // ===== T·ª∞ ƒê·ªòNG TR·∫¢ L·ªúI SHORTCUT =====
  onChat: async function ({ event, message, usersData }) {
    let shortcuts = loadShortcuts(event.threadID);
    let body = (event.body || "").toLowerCase();

    if (shortcuts[body]) {
      let sc = shortcuts[body];
      let senderName = await usersData.getName(event.senderID);

      // Thay {name} = tag ng∆∞·ªùi g·ªçi
      let content = sc.content.replace(/{name}/g, senderName);

      return message.reply({
        body: content,
        attachment: (sc.attachment || []).map(p => fs.createReadStream(p)),
        mentions: [{ tag: senderName, id: event.senderID }]
      });
    }
  }
};