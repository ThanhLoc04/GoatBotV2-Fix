module.exports = {
  config: {
    name: "setmoney",
    version: "1.0.1",
    author: "ntkiendz",
    countDown: 5,
    role: 2, // üîí Ch·ªâ admin bot m·ªõi d√πng ƒë∆∞·ª£c
    shortDescription: "Set s·ªë ti·ªÅn cho ng∆∞·ªùi d√πng",
    longDescription: "Admin bot c√≥ th·ªÉ ch·ªânh s·ªë ti·ªÅn c·ªßa b·∫£n th√¢n ho·∫∑c ng∆∞·ªùi kh√°c (tag/reply).",
    category: "owner",
    guide: {
      en: "{p}setmoney <s·ªë ti·ªÅn> [tag | reply]"
    }
  },

  onStart: async function ({ event, args, usersData, message }) {
    const { senderID, mentions, messageReply } = event;

    if (!args[0]) {
      return message.reply("‚ö° D√πng: setmoney <s·ªë ti·ªÅn> [tag ho·∫∑c reply]");
    }

    // --- Parse s·ªë ti·ªÅn ---
    function parseMoney(input) {
      const units = {
        k: 10n ** 12n,
        m: 10n ** 15n,
        b: 10n ** 18n,
        kb: 10n ** 21n,
        mb: 10n ** 24n,
        gb: 10n ** 27n,
        g: 10n ** 36n
      };
      if (!isNaN(input)) return BigInt(input);
      let match = input.match(/^(\d+)([a-z]+)?$/i);
      if (!match) return null;
      let amount = BigInt(match[1]);
      let unit = match[2]?.toLowerCase();
      if (unit && units[unit]) amount *= units[unit];
      return amount;
    }

    let money = parseMoney(args[0]);
    if (!money || money < 0n) {
      return message.reply("‚ö° Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá!");
    }

    // --- X√°c ƒë·ªãnh target ---
    let targetID = senderID;
    if (Object.keys(mentions).length > 0) {
      targetID = Object.keys(mentions)[0];
    } else if (messageReply) {
      targetID = messageReply.senderID;
    }

    // --- Set ti·ªÅn ---
    let userData = await usersData.get(targetID);
    await usersData.set(targetID, {
      ...userData,
      money: Number(money)
    });

    let name = await usersData.getName(targetID);

    return message.reply(
      `‚úÖ Admin ƒë√£ set ti·ªÅn c·ªßa ${name} th√†nh: ${money.toLocaleString("en-US")}$`
    );
  }
};